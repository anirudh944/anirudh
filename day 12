// let mypromise =new Promise((resolve,reject)=>{
//     let sucess = true
//     if(sucess){
//         resolve ("the operation is sucessfull");

//     }else{
//         reject('the operation is failed')
//     }

// });
// mypromise
// .then(result=>{
//     console.log(result)
// })
// .catch(error=>{
//     console.log(error)
// })


// new Promise((resolve, reject) => {
//     setTimeout(() => {
//         resolve('success');
//     }, 1000);
//     }
// ).then((data) => {
//     console.log(data);  
//     return 'some other data';
// }
// ).then((data) => {
//     console.log(data);
// }
// ).catch((error) => {
//     console.log(error);
// }  
// );


// promise  with set timeout 
// -- using aettimout  the promise  will relsove after certain amount of time 3

// let delayedPromise = new Promise((resolve, reject) => {
//     setTimeout(() => {
//         resolve("Promise resolved after 2 seconds");
//     }, 2000); 
// });

// delayedPromise
//     .then(result => {
//         console.log(result); 
//     })
//     .catch(error => {
//         console.log("Error:", error);
//     });



promise:
a promise is a special java script object that represents the eventual completion (or failure )of an asynchronous operation.


---1)three states 
  ---1)pending : the intial state, the promise is still waiting fotr the operation to finish
---2)Fulfilled: the operation completed successfully
---3)Rejected: the operation failed

Exp: 
--To create a promise new promise();
the promise constructor takes a function with two parameters:
resolve --to mark as the promise is successful
reject --to mark it a failed

Handling: 
.then () menthod
