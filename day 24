// import React,{ useReducer}from 'react';
// function appleReducer (state =3,action){
//     switch(action.type){
//         case'ADD_APPLE':
//         return state+1;
//         case 'EAT_APPLE':
//             return state-1;
//             default:
//                  return state;
//     }

// }

// function App(){
//     const[state,dispatch]=useReducer(appleReducer,3)
//     return(
//         <div>
//             <h1>apple counter </h1>
//             <p>number of apples{state}</p>
//             <button onClick={()=>dispatch({type:'APPLE_APPLE'})}>ADD APPLE</button>
//             <button onClick={()=>dispatch({type:'EAT_APPLE'})}> EAT APPLE </button>
//         </div>
//     )
// }
// export default App;

// import React ,{useReducer}from "react";
// //reducer function to track the number of applications
// function appleReducer(state=3,action){
//   switch(action.type){
//     case 'ADD_APPLE':
//       return state+1;
//       case 'EAT_APPLE':
//         return state-1;
//         default:
//           return state;
// }
// }
// function App(){
//   const[state,dispatch]=useReducer(appleReducer,3)
//   return(
//     <div>
//       <h1>Apple Counter:</h1>
//       <p>Number of Apples: {state}</p>
//       <button onClick={()=>dispatch({type:'ADD_APPLE'})}>Add Apple</button>
//       <button onClick={()=>dispatch({type:'EAT_APPLE'})}>Eat Apple</button>
//     </div>

//   )
// }
// export default App;
import React, { useReducer } from "react";
import "./App.css"; // Import the CSS file

// Action Types
const ADD_APPLE = "ADD_APPLE";
const EAT_APPLE = "EAT_APPLE";

// Reducer function
function appleReducer(state, action) {
  switch (action.type) {
    case ADD_APPLE:
      return state + 1;
    case EAT_APPLE:
      return state > 0 ? state - 1 : state; // Prevent negative apples
    default:
      return state;
  }
}

function App() {
  const [state, dispatch] = useReducer(appleReducer, 3);

  return (
    <div className="container">
      <h1>üçè Apple Counter üçè</h1>
      <p>Number of Apples: {state}</p>
      <div className="apple-container">
        {Array.from({ length: state }).map((_, index) => (
          <span key={index} className="apple">üçé</span>
        ))}
      </div>
      <button className="add-btn" onClick={() => dispatch({ type: ADD_APPLE })}>Add Apple</button>
      <button className="eat-btn" onClick={() => dispatch({ type: EAT_APPLE })}>Eat Apple</button>
    </div>
  );
}

export default App;

React reducer :-
A reucer function thathelps to update based on the action we take 
Current state :- thr current value an item 
Action:-
Call back function in react(:-

The React useCallback Hook returns a memoized callback function. This allows us to isolate resource intensive functions so that they will not automatically run on every render.
The useCallback Hook only runs when one of its dependencies update.
This can improve performance.


                            import React,{useState}from 'react';
import Child from './Child';
const Parent = () => {
  const [message, setMessage] = useState('Hello World');
  const changeMessage=()=>{
    setMessage('You clicked the button');
  };
  return (
    <div>
      <h1>{message}</h1>
      <Child changeMessage={changeMessage} />
    </div>
  )

}
                            import React from 'react';
const Child=({changeMessage})=>{
    return(
        <button onClick={changeMessage}>click me</button>
    )
}
export default Child;
